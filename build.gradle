group 'tron-grpc'
version '1.3.0.2-RELEASE'

apply plugin: 'java'
apply plugin: 'com.google.protobuf'
apply plugin: 'maven'
apply plugin: 'maven-publish'

sourceCompatibility = 1.8
targetCompatibility = JavaVersion.VERSION_1_8
[compileJava, compileTestJava]*.options*.encoding = 'UTF-8'

compileJava.options*.compilerArgs = [
        "-Xlint:serial", "-Xlint:varargs", "-Xlint:classfile", "-Xlint:dep-ann",
        "-Xlint:divzero", "-Xlint:empty", "-Xlint:finally", "-Xlint:overrides",
        "-Xlint:path", "-Xlint:static", "-Xlint:try", "-Xlint:fallthrough",
        "-Xlint:deprecation", "-Xlint:unchecked", "-Xlint:-options"
]

ext {
    groupId = 'com.github.tronprotocol'
    artifactId = 'tron-grpc'
    libraryVersion = '1.3.0.3-RELEASE'
    licenseName = 'GNU LESSER GENERAL PUBLIC LICENSE Version 3'
    licenseUrl = 'https://www.gnu.org/licenses/lgpl-3.0.ru.html'
    allLicenses = ["LGPL"]

    nexusUrl = ''
    nexusUser = ''
    nexusPassword = ''
}

repositories {
    mavenLocal()
    mavenCentral()
}

sourceSets {
    main {
        proto {
            srcDir 'src/main/protos'
        }
        java {
            srcDir 'src/main/gen'
            srcDir 'src/main/java'
        }
    }

}
buildscript {
    repositories {
        mavenLocal()
        maven {
            url "https://cdn.lfrs.sl/repository.liferay.com/nexus/content/groups/public"
        }
        mavenCentral()
    }

    dependencies {
        classpath 'com.github.jengelman.gradle.plugins:shadow:2.0.2'
        classpath 'com.google.protobuf:protobuf-gradle-plugin:0.8.3'
        classpath "gradle.plugin.com.liferay:gradle-plugins-node:4.3.0"
    }
}

task wrapper(type: Wrapper) {
    gradleVersion = '3.3'
}

dependencies {
    testCompile group: 'junit', name: 'junit', version: '4.12'
    compile group: 'com.beust', name: 'jcommander', version: '1.72'
    //compile group: 'org.slf4j', name: 'slf4j-api', version: '1.7.25'
    compile group: 'org.slf4j', name: 'jcl-over-slf4j', version: '1.7.25'
    compile group: 'ch.qos.logback', name: 'logback-classic', version: '1.2.3'
    compile 'com.maxmind.geoip2:geoip2:2.10.0'

    // google grpc
    compile group: 'io.grpc', name: 'grpc-netty', version: '1.30.2'
    compile group: 'io.grpc', name: 'grpc-protobuf', version: '1.30.2'
    compile group: 'io.grpc', name: 'grpc-stub', version: '1.30.2'

    compile group: 'com.googlecode.protobuf-java-format', name: 'protobuf-java-format', version: '1.4'
    compile "com.madgag.spongycastle:core:1.58.0.0"
    compile "com.madgag.spongycastle:prov:1.58.0.0"
    compile group: 'com.typesafe', name: 'config', version: '1.3.2'
    compile "com.google.code.findbugs:jsr305:3.0.0"

    // https://mvnrepository.com/artifact/org.bouncycastle/bcprov-jdk15on
    compile group: 'org.bouncycastle', name: 'bcprov-jdk15on', version: '1.64'
    // https://mvnrepository.com/artifact/org.apache.commons/commons-lang3
    compile group: 'org.apache.commons', name: 'commons-lang3', version: '3.9'

    compile "org.apache.commons:commons-collections4:4.0"
    compile "org.apache.commons:commons-lang3:3.4"
    compile group: 'com.google.api.grpc', name: 'googleapis-common-protos', version: '0.0.3'
    compile 'com.alibaba:fastjson:1.2.47'

    compile group: 'commons-io', name: 'commons-io', version: '2.6'
    compile group: 'org.projectlombok', name: 'lombok', version: '1.18.2'

    compile group: 'org.jline', name: 'jline', version: '3.1.3'
}

protobuf {
    generatedFilesBaseDir = "$projectDir/src/"
    protoc {
        artifact = "com.google.protobuf:protoc:3.5.1-1"

    }
    plugins {
        grpc {
            artifact = 'io.grpc:protoc-gen-grpc-java:1.9.0'
        }
    }
    generateProtoTasks {
        all().each { task ->
            task.builtins {
                java {
                    outputSubDir = "gen"
                }
            }
        }
        all()*.plugins {
            grpc {
                outputSubDir = "gen"
            }
        }
    }
}

task writeNewPom {
    doLast {
        pom {
            project {

            }
        }.writeTo("$buildDir/pom.xml")
    }
}

publishing {
    publications {
        maven(MavenPublication) {
            groupId = groupId
            artifactId = artifactId
            description = 'TRON client library that uses GRPC to make request to tron nodes.'
            version libraryVersion
            pom {
                description 'TRON client library that uses GRPC to make request to tron nodes.'
            }
            from components.java
        }
    }
}

task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

configurations {
    oneLib
}

artifacts {
    archives sourcesJar
    oneLib file("./build/libs/${artifactId}-${libraryVersion}.jar")
    oneLib file("./build/libs/${artifactId}-${libraryVersion}-sources.jar")
}

project.tasks.create('uploadToNexus', Upload.class) {

    configuration = configurations.oneLib

    repositories {

        mavenDeployer {

            repository(url: "${nexusUrl}") {

                authentication(userName: "${nexusUser}", password: "${nexusPassword}")

            }

            pom.version = "${libraryVersion}"

            pom.artifactId = "${artifactId}"

            pom.groupId = "${groupId}"

        }

    }
}